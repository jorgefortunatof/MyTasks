{"version":3,"sources":["src/styles/colors.ts","src/styles/global.tsx","src/storage/tasksStorage.ts","src/hooks/tasks.tsx","src/components/Task/styles.tsx","src/components/Task/index.tsx","src/components/TaskCounter/styles.tsx","src/components/TaskCounter/index.tsx","src/components/TaskFilter/styles.tsx","src/components/TaskFilter/index.tsx","src/components/TaskModal/styles.tsx","src/components/TaskModal/index.tsx","src/screens/MyTasks/styles.tsx","src/screens/MyTasks/index.tsx","App.tsx"],"names":["Container","styled","SafeAreaView","colors","getTasksFromStorage","a","async","AsyncStorage","getItem","stringTasks","tasks","JSON","parse","storeTasks","stringify","setItem","TaskContext","createContext","TasksProvider","children","useState","setTasks","filteredTasks","setFilteredTasks","taskFilter","setTaskFilter","useEffect","getTasks","undefined","completed","filtered","filter","task","useCallback","updateTask","taskIndex","findIndex","itemTask","id","newTasks","addTask","removeTask","filterTasks","removeFilter","Provider","value","useTasks","context","useContext","Error","View","Title","Text","Description","CheckBox","Cb","EditIconContainer","TouchableOpacity","EditIcon","MaterialCommunityIcons","attrs","name","RemoveIconContainer","RemoveIcon","Task","data","toggleEdit","title","description","checked","setChecked","updatedTask","onPress","onChange","TasksNumber","Box","TaskCounter","setCompleted","uncompleted","setUncompleted","length","completedCount","uncompletedCount","Picker","TaskFilter","selectedValue","setSelectedValue","onValueChange","itemValue","itemIndex","Item","label","transparentize","Content","CloseIconContainer","CloseIcon","Input","TextInput","Button","color","Modal","Platform","OS","WebModal","EditTaskModal","taskSelected","visible","closeModal","setTitle","setDescription","toggleClose","toggleSave","alert","Math","random","onRequestClose","transparent","placeholder","onChangeText","text","FloatButton","PlusIcon","TaskList","FlatList","FilterAndCounterContainer","MyTask","showModal","setShowModal","setTaskSelected","toggleEditTask","renderItem","item","keyExtractor","String","TaskModal","App","MyTasks","StatusBar","style"],"mappings":"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","file":"static/js/app.4921d02e.chunk.js","sourcesContent":["export default {\n\tprimary: \"#fe6055\",\n\tsecondary: \"#009688\",\n\tblack: \"#1f1f1f\",\n\tgray: \"#d4d5d9\",\n\twhite: \"#fff\",\n};\n","import styled from \"styled-components/native\";\nimport colors from \"./colors\";\n\nexport const Container = styled.SafeAreaView`\n\tflex: 1;\n\talign-items: center;\n\tjustify-content: flex-start;\n\n\toverflow-y: scroll;\n\tbackground-color: ${colors.primary};\n`;\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport TaskType from \"../types/TaskType\";\n\nexport async function getTasksFromStorage() {\n\tconst stringTasks = await AsyncStorage.getItem(\"@MyTasks/tasks\");\n\tif (!stringTasks) return [];\n\n\tconst tasks = JSON.parse(stringTasks);\n\n\treturn tasks;\n}\n\nexport function storeTasks(tasks: TaskType[]) {\n\tconst stringTasks = JSON.stringify(tasks);\n\n\tAsyncStorage.setItem(\"@MyTasks/tasks\", stringTasks);\n}\n","import React, {\n\tcreateContext,\n\tuseCallback,\n\tuseContext,\n\tuseEffect,\n\tuseState,\n} from \"react\";\nimport { getTasksFromStorage, storeTasks } from \"../storage/tasksStorage\";\nimport TaskType from \"../types/TaskType\";\n\ntype TasksContextData = {\n\ttasks: TaskType[];\n\tfilteredTasks: TaskType[];\n\t// taskSelectedToEdit: TaskType;\n\n\taddTask: (task: TaskType) => void;\n\tremoveTask: (task: TaskType) => void;\n\tupdateTask: (task: TaskType) => void;\n\n\tfilterTasks: (filter: TaskFilter) => void;\n\tremoveFilter: () => void;\n};\n\ntype TaskFilter = {\n\tcompleted: boolean;\n};\n\nconst TaskContext = createContext<TasksContextData>({} as TasksContextData);\n\nexport const TasksProvider: React.FC = ({ children }) => {\n\t// const [taskToEdit, setTaskToEdit] = useState<TaskType>({} as TaskType);\n\tconst [tasks, setTasks] = useState<TaskType[]>([]);\n\n\tconst [filteredTasks, setFilteredTasks] = useState<TaskType[]>([]);\n\tconst [taskFilter, setTaskFilter] = useState<TaskFilter>({} as TaskFilter);\n\n\tuseEffect(() => {\n\t\tgetTasks();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (taskFilter.completed === undefined) {\n\t\t\tsetFilteredTasks(tasks);\n\t\t} else {\n\t\t\tconst filtered = tasks.filter(\n\t\t\t\t(task) => task.completed === taskFilter.completed\n\t\t\t);\n\t\t\tsetFilteredTasks(filtered);\n\t\t}\n\t}, [taskFilter, tasks]);\n\n\tconst getTasks = useCallback(async () => {\n\t\tconst tasks = await getTasksFromStorage();\n\t\tsetTasks(tasks);\n\t}, [setTasks, getTasksFromStorage]);\n\n\tconst updateTask = useCallback(\n\t\t(task: TaskType) => {\n\t\t\tconst taskIndex = tasks.findIndex((itemTask) => itemTask.id === task.id);\n\n\t\t\tif (taskIndex < 0) return;\n\n\t\t\tlet newTasks = [...tasks];\n\t\t\tnewTasks[taskIndex] = task;\n\n\t\t\tsetTasks(newTasks);\n\t\t\tstoreTasks(newTasks);\n\t\t},\n\t\t[tasks, setTasks]\n\t);\n\n\tconst addTask = useCallback(\n\t\t(task: TaskType) => {\n\t\t\tconst newTasks = [...tasks, task];\n\t\t\tsetTasks(newTasks);\n\t\t\tstoreTasks(newTasks);\n\t\t},\n\t\t[tasks, setTasks]\n\t);\n\n\tconst removeTask = useCallback(\n\t\t(task: TaskType) => {\n\t\t\tconst newTasks = tasks.filter((itemTask) => itemTask.id !== task.id);\n\n\t\t\tsetTasks(newTasks);\n\t\t\tstoreTasks(newTasks);\n\t\t},\n\t\t[tasks, setTasks]\n\t);\n\n\tconst filterTasks = useCallback((filter: TaskFilter) => {\n\t\tsetTaskFilter(filter);\n\t}, []);\n\n\tconst removeFilter = useCallback(() => {\n\t\tsetTaskFilter({} as TaskFilter);\n\t}, []);\n\n\treturn (\n\t\t<TaskContext.Provider\n\t\t\tvalue={{\n\t\t\t\ttasks,\n\t\t\t\tfilteredTasks,\n\t\t\t\taddTask,\n\t\t\t\tremoveTask,\n\t\t\t\tupdateTask,\n\t\t\t\tfilterTasks,\n\t\t\t\tremoveFilter,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</TaskContext.Provider>\n\t);\n};\n\nexport function useTasks() {\n\tconst context = useContext(TaskContext);\n\n\tif (!context) {\n\t\tthrow new Error(\"useTasks deve ser usado com um provider!\");\n\t}\n\n\treturn context;\n}\n","import styled from \"styled-components/native\";\nimport colors from \"../../styles/colors\";\nimport Cb from \"expo-checkbox\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\n\nexport const Container = styled.View`\n\tposition: relative;\n\n\tmin-height: 100px;\n\tmargin-bottom: 20px;\n\tpadding: 35px;\n\tborder-radius: 12px;\n\n\tbackground-color: ${colors.white};\n`;\n\nexport const Title = styled.Text`\n\tfont-size: 20px;\n\tfont-weight: bold;\n`;\n\nexport const Description = styled.Text`\n\tfont-size: 14px;\n`;\n\nexport const CheckBox = styled(Cb)`\n\twidth: 20px;\n\theight: 20px;\n\n\tposition: absolute;\n\tright: 20px;\n\tbottom: 20px;\n\n\tcolor: white;\n`;\n\nexport const EditIconContainer = styled.TouchableOpacity`\n\tposition: absolute;\n\ttop: 20px;\n\tright: 45px;\n`;\n\nexport const EditIcon = styled(MaterialCommunityIcons).attrs(() => ({\n\tname: \"pencil\",\n}))`\n\tfont-size: 16px;\n`;\n\nexport const RemoveIconContainer = styled.TouchableOpacity`\n\tposition: absolute;\n\ttop: 20px;\n\tright: 20px;\n`;\n\nexport const RemoveIcon = styled(MaterialCommunityIcons).attrs(() => ({\n\tname: \"delete\",\n}))`\n\tfont-size: 16px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useTasks } from \"../../hooks/tasks\";\nimport TaskType from \"../../types/TaskType\";\nimport {\n\tContainer,\n\tTitle,\n\tDescription,\n\tCheckBox,\n\tRemoveIcon,\n\tRemoveIconContainer,\n\tEditIcon,\n\tEditIconContainer,\n} from \"./styles\";\n\ntype TaskProps = {\n\tdata: TaskType;\n\n\ttoggleEdit: (task: TaskType) => void;\n};\n\nconst Task: React.FC<TaskProps> = ({ data, toggleEdit }) => {\n\tconst { title, description, completed } = data;\n\n\tconst { updateTask, removeTask } = useTasks();\n\tconst [checked, setChecked] = useState(completed);\n\n\tuseEffect(() => {\n\t\tconst updatedTask = { ...data, completed: checked };\n\t\tupdateTask(updatedTask);\n\t}, [checked]);\n\n\treturn (\n\t\t<Container>\n\t\t\t<RemoveIconContainer onPress={() => removeTask(data)}>\n\t\t\t\t<RemoveIcon />\n\t\t\t</RemoveIconContainer>\n\n\t\t\t<EditIconContainer onPress={() => toggleEdit(data)}>\n\t\t\t\t<EditIcon />\n\t\t\t</EditIconContainer>\n\n\t\t\t<Title>{title}</Title>\n\t\t\t<Description>{description}</Description>\n\t\t\t<CheckBox value={checked} onChange={() => setChecked(!checked)} />\n\t\t</Container>\n\t);\n};\n\nexport default Task;\n","import styled from \"styled-components/native\";\nimport colors from \"../../styles/colors\";\n\nexport const Container = styled.View`\n\tmargin: 30px 0;\n\tflex-direction: row;\n`;\n\nexport const Title = styled.Text`\n\tfont-weight: bold;\n\tborder-bottom-color: ${colors.white};\n\n\tcolor: ${colors.white};\n`;\n\nexport const TasksNumber = styled.Text`\n\ttext-align: center;\n\tcolor: ${colors.white};\n`;\n\nexport const Box = styled.View`\n\tmargin-right: 10px;\n\tpadding: 10px;\n\n\tborder-radius: 6px;\n\n\tbackground-color: ${colors.black};\n`;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useTasks } from \"../../hooks/tasks\";\n\nimport { Container, Title, TasksNumber, Box } from \"./styles\";\n\nconst TaskCounter: React.FC = () => {\n\tconst { tasks } = useTasks();\n\n\tconst [completed, setCompleted] = useState(0);\n\tconst [uncompleted, setUncompleted] = useState(0);\n\n\tconst getCounts = useCallback(() => {\n\t\tconst completedTasks = tasks.filter((task) => task.completed);\n\t\treturn completedTasks.length;\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst completedTasks = tasks.filter((task) => task.completed);\n\n\t\tconst completedCount = completedTasks.length;\n\t\tconst uncompletedCount = tasks.length - completedCount;\n\n\t\tsetCompleted(completedCount);\n\t\tsetUncompleted(uncompletedCount);\n\t});\n\n\treturn (\n\t\t<Container>\n\t\t\t<Box>\n\t\t\t\t<Title>Total</Title>\n\t\t\t\t<TasksNumber>{tasks.length}</TasksNumber>\n\t\t\t</Box>\n\t\t\t<Box>\n\t\t\t\t<Title>Executadas</Title>\n\t\t\t\t<TasksNumber>{completed}</TasksNumber>\n\t\t\t</Box>\n\n\t\t\t<Box>\n\t\t\t\t<Title>Não Executadas</Title>\n\t\t\t\t<TasksNumber>{uncompleted}</TasksNumber>\n\t\t\t</Box>\n\t\t</Container>\n\t);\n};\n\nexport default TaskCounter;\n","import styled from \"styled-components/native\";\n\nexport const Picker = styled.Picker`\n\twidth: 120px;\n\theight: 40px;\n\n\tmargin: 20px 0;\n\n\tfont-size: 14px;\n\n\tborder: 0;\n\tborder-radius: 4px;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { useTasks } from \"../../hooks/tasks\";\n\nimport { Picker } from \"./styles\";\n\nconst TaskFilter: React.FC = () => {\n\tconst { filterTasks, removeFilter } = useTasks();\n\n\tconst [selectedValue, setSelectedValue] = useState(\"\");\n\n\tuseEffect(() => {\n\t\tswitch (selectedValue) {\n\t\t\tcase \"0\":\n\t\t\t\tremoveFilter();\n\t\t\t\tbreak;\n\t\t\tcase \"1\":\n\t\t\t\tfilterTasks({ completed: true });\n\t\t\t\tbreak;\n\t\t\tcase \"2\":\n\t\t\t\tfilterTasks({ completed: false });\n\t\t\t\tbreak;\n\t\t}\n\t}, [selectedValue]);\n\n\treturn (\n\t\t<Picker\n\t\t\tselectedValue={selectedValue}\n\t\t\tonValueChange={(itemValue, itemIndex) => setSelectedValue(itemValue)}\n\t\t>\n\t\t\t<Picker.Item value=\"0\" label=\"Todas\" />\n\t\t\t<Picker.Item value=\"1\" label=\"Executadas\" />\n\t\t\t<Picker.Item value=\"2\" label=\"Não Executadas\" />\n\t\t</Picker>\n\t);\n};\n\nexport default TaskFilter;\n","import styled from \"styled-components/native\";\nimport { Platform } from \"react-native\";\nimport WebModal from \"modal-enhanced-react-native-web\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\n\nimport { transparentize } from \"polished\";\nimport colors from \"../../styles/colors\";\n\nexport const Container = styled.View`\n\tflex: 1;\n\tjustify-content: center;\n\talign-items: center;\n\n\tbackground-color: ${transparentize(0.5, colors.black)};\n`;\n\nexport const Content = styled.View`\n\tposition: relative;\n\n\tmax-width: 700px;\n\twidth: 80%;\n\n\t@media (min-width: 700px) {\n\t\twidth: 70%;\n\t}\n\n\tmargin: 40px;\n\tpadding: 60px 20px 40px 20px;\n\n\tborder-radius: 10px;\n\tbackground-color: ${colors.white};\n`;\n\nexport const CloseIconContainer = styled.TouchableOpacity`\n\tposition: absolute;\n\ttop: 20px;\n\tleft: 20px;\n`;\n\nexport const CloseIcon = styled(MaterialCommunityIcons).attrs(() => ({\n\tname: \"close\",\n}))`\n\tfont-size: 20px;\n`;\n\nexport const Title = styled.Text`\n\tfont-size: 24px;\n\tfont-weight: bold;\n\n\tmargin-bottom: 16px;\n`;\n\nexport const Input = styled.TextInput`\n\tfont-size: 16px;\n\theight: 20px;\n\n\tpadding: 20px 10px;\n\tmargin-bottom: 16px;\n\n\tborder-radius: 6px;\n\tbackground-color: ${colors.gray};\n`;\n\nexport const Button = styled.Button.attrs(() => ({\n\tcolor: colors.primary,\n}))`\n\tborder-radius: 2px;\n\tpadding: 4px;\n`;\n\nexport let Modal = styled.Modal`\n\tflex: 1;\n`;\n\nif (Platform.OS === \"web\") {\n\tModal = styled(WebModal)`\n\t\tmargin: -0.1px;\n\t`;\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useTasks } from \"../../hooks/tasks\";\nimport TaskType from \"../../types/TaskType\";\nimport {\n\tContainer,\n\tContent,\n\tModal,\n\tCloseIcon,\n\tCloseIconContainer,\n\tTitle,\n\tInput,\n\tButton,\n} from \"./styles\";\n\ntype EditTaskModalProps = {\n\ttaskSelected: TaskType;\n\tvisible: boolean;\n\tcloseModal: () => void;\n};\n\nconst EditTaskModal: React.FC<EditTaskModalProps> = ({\n\ttaskSelected,\n\tvisible,\n\tcloseModal,\n}) => {\n\tconst { updateTask, addTask } = useTasks();\n\n\tconst [title, setTitle] = useState(taskSelected.title);\n\tconst [description, setDescription] = useState(taskSelected.description);\n\n\tuseEffect(() => {\n\t\tsetTitle(taskSelected.title);\n\t\tsetDescription(taskSelected.description);\n\t}, [taskSelected]);\n\n\tconst toggleClose = useCallback(() => {\n\t\tsetTitle(\"\");\n\t\tsetDescription(\"\");\n\t\tcloseModal();\n\t}, [closeModal, setTitle, setDescription]);\n\n\tconst toggleSave = useCallback(() => {\n\t\tif (taskSelected.id) {\n\t\t\tconst updatedTask = { ...taskSelected, title, description };\n\t\t\tupdateTask(updatedTask);\n\t\t} else {\n\t\t\tif (!title) return alert(\"A tarefa deve conter um titulo!\");\n\t\t\taddTask({ id: Math.random(), title, description, completed: false });\n\t\t}\n\n\t\ttoggleClose();\n\t}, [addTask, updateTask, toggleClose, title, description]);\n\n\treturn (\n\t\t<Modal onRequestClose={toggleClose} visible={visible} transparent>\n\t\t\t<Container>\n\t\t\t\t<Content>\n\t\t\t\t\t<CloseIconContainer onPress={toggleClose}>\n\t\t\t\t\t\t<CloseIcon />\n\t\t\t\t\t</CloseIconContainer>\n\n\t\t\t\t\t<Title>\n\t\t\t\t\t\t{taskSelected.id ? \"Editar tarefa\" : \"Adicionar tarefa\"}\n\t\t\t\t\t</Title>\n\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder=\"Nome da tarefa\"\n\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\tonChangeText={(text) => setTitle(text)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder=\"Descrição da tarefa\"\n\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\tonChangeText={(text) => setDescription(text)}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Button title=\"Salvar\" onPress={toggleSave} />\n\t\t\t\t</Content>\n\t\t\t</Container>\n\t\t</Modal>\n\t);\n};\n\nexport default EditTaskModal;\n","import styled from \"styled-components/native\";\nimport colors from \"../../styles/colors\";\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport { FlatList } from \"react-native\";\n\nexport const Container = styled.View`\n\twidth: 100%;\n\tmax-width: 700px;\n\tpadding: 40px 20px;\n`;\n\nexport const Title = styled.Text`\n\tfont-size: 30px;\n\tfont-weight: bold;\n\tcolor: ${colors.white};\n`;\n\nexport const FloatButton = styled.TouchableOpacity`\n\tposition: fixed;\n\tbottom: 40px;\n\tright: 40px;\n\n\tpadding: 10px;\n\n\tborder-radius: 30px;\n\tbackground-color: ${colors.black};\n`;\n\nexport const PlusIcon = styled(MaterialCommunityIcons).attrs(() => ({\n\tname: \"plus\",\n}))`\n\tfont-size: 40px;\n\n\tcolor: ${colors.white};\n`;\n\nexport const TaskList = styled(FlatList as new () => FlatList)``;\n\nexport const FilterAndCounterContainer = styled.View`\n\tflex-direction: row;\n\tflex-wrap: wrap;\n\n\tjustify-content: space-between;\n\talign-items: center;\n`;\n","import React, { useCallback, useState } from \"react\";\nimport Task from \"../../components/Task\";\nimport TaskCounter from \"../../components/TaskCounter\";\nimport TaskFilter from \"../../components/TaskFilter\";\nimport TaskModal from \"../../components/TaskModal\";\nimport TaskType from \"../../types/TaskType\";\n\nimport { useTasks } from \"../../hooks/tasks\";\nimport { ListRenderItem } from \"react-native\";\n\nimport {\n\tContainer,\n\tTitle,\n\tPlusIcon,\n\tFloatButton,\n\tTaskList,\n\tFilterAndCounterContainer,\n} from \"./styles\";\n\nconst MyTask: React.FC = () => {\n\tconst { filteredTasks } = useTasks();\n\n\tconst [showModal, setShowModal] = useState(false);\n\tconst [taskSelected, setTaskSelected] = useState({} as TaskType);\n\n\tconst toggleEditTask = useCallback(\n\t\t(task) => {\n\t\t\tsetTaskSelected(task);\n\t\t\tsetShowModal(true);\n\t\t},\n\t\t[setTaskSelected, setShowModal]\n\t);\n\n\tconst renderItem: ListRenderItem<TaskType> = useCallback(\n\t\t({ item }) => <Task data={item} toggleEdit={toggleEditTask} />,\n\t\t[toggleEditTask]\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<Container>\n\t\t\t\t<Title>Minhas tarefas.</Title>\n\n\t\t\t\t<FilterAndCounterContainer>\n\t\t\t\t\t<TaskCounter />\n\t\t\t\t\t<TaskFilter />\n\t\t\t\t</FilterAndCounterContainer>\n\n\t\t\t\t<TaskList\n\t\t\t\t\tkeyExtractor={(task) => String(task.id)}\n\t\t\t\t\tdata={filteredTasks}\n\t\t\t\t\trenderItem={renderItem}\n\t\t\t\t/>\n\t\t\t</Container>\n\n\t\t\t<TaskModal\n\t\t\t\ttaskSelected={taskSelected}\n\t\t\t\tvisible={showModal}\n\t\t\t\tcloseModal={() => {\n\t\t\t\t\tsetShowModal(false);\n\t\t\t\t\tsetTaskSelected({} as TaskType);\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<FloatButton onPress={() => setShowModal(true)}>\n\t\t\t\t<PlusIcon />\n\t\t\t</FloatButton>\n\t\t</>\n\t);\n};\n\nexport default MyTask;\n","import React from \"react\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { Container } from \"./src/styles/global\";\n\nimport MyTasks from \"./src/screens/MyTasks\";\nimport { TasksProvider } from \"./src/hooks/tasks\";\n\nexport default function App() {\n\treturn (\n\t\t<TasksProvider>\n\t\t\t<Container>\n\t\t\t\t<MyTasks />\n\t\t\t\t<StatusBar style=\"auto\" />\n\t\t\t</Container>\n\t\t</TasksProvider>\n\t);\n}\n"],"sourceRoot":""}